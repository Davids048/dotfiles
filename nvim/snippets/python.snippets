snippet log_conf "logging configs"
    import datetime 
    import os 
    import logging 
    import sys


    def setup_logging(logger, log_file=None, level=logging.INFO):
        """Setup a logger with consistent formatting"""
        logger.propagate = False

        if not logger.handlers:
            formatter = logging.Formatter(
                '%(asctime)s - %(filename).10s.:%(lineno)d - %(levelname)s - %(message)s',
                datefmt='%Y-%m-%d %H:%M:%S'
            )

            # log to console 
            console_handler = logging.StreamHandler(sys.stdout) 
            console_handler.setFormatter(formatter) 
            logger.addHandler(console_handler) 

            # log to file 
            if log_file:
                # create unique log files
                if os.path.exists(log_file):
                    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
                    log_file = log_file.replace(".log", f"_{timestamp}.log")
                file_handler = logging.FileHandler(log_file, mode='w', encoding='utf-8')
                file_handler.setFormatter(formatter) 
                logger.addHandler(file_handler) 

            logger.setLevel(level)


snippet log_basic "basic logging using prints"
    import inspect
    from pathlib import Path

    frame = inspect.currentframe()
    caller_frame = frame.f_back
    
    # Extract file name and line number
    filename = Path(caller_frame.f_code.co_filename).name
    line_num = caller_frame.f_lineno
    
    # Print with context
    print(f"LOG - [{filename}:{line_num}] - {message}")

snippet log_omni "full logging w/ color"
    import logging
    import sys
    import os
    import datetime
    
    class ColoredFormatter(logging.Formatter):
        """Formatter that adds color to log levels"""
        
        # ANSI color codes
        COLORS = {
            'DEBUG': '\033[36m',    # Cyan
            'INFO': '\033[32m',     # Green
            'WARNING': '\033[33m',  # Yellow
            'ERROR': '\033[31m',    # Red
            'CRITICAL': '\033[35m', # Magenta
        }
        RESET = '\033[0m'
        
        def format(self, record):
            # Get the color for this log level
            color = self.COLORS.get(record.levelname, self.RESET)
            
            # Format the message
            formatted = super().format(record)
            
            # Find where the actual message starts (after the levelname)
            # Split at " - " after levelname
            parts = formatted.split(' - ', 3)  # Split into at most 4 parts
            if len(parts) >= 4:
                # Color everything except the actual message
                colored = f"{color}{parts[0]} - {parts[1]} - {parts[2]}{self.RESET} - {parts[3]}"
                return colored
            return formatted
    
    
    def setup_logging(logger=None, log_file=None, level=logging.INFO):
        """Setup a logger with consistent formatting"""
        if logger is None:
            logger = logging.getLogger(__name__)
        logger.propagate = False
        if not logger.handlers:
            # Console handler with color
            console_formatter = ColoredFormatter(
                '[%(asctime)s] - [%(filename).10s.:%(lineno)d] - %(levelname)s - %(message)s',
                datefmt='%m-%d %H:%M:%S'
            )
            console_handler = logging.StreamHandler(sys.stdout) 
            console_handler.setFormatter(console_formatter) 
            logger.addHandler(console_handler)
            
            # File handler without color (plain text)
            if log_file:
                # create unique log files
                if os.path.exists(log_file):
                    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
                    log_file = log_file.replace(".log", f"_{timestamp}.log")
                
                plain_formatter = logging.Formatter(
                    '[%(asctime)s] - [%(filename).10s.:%(lineno)d] - %(levelname)s - %(message)s',
                    datefmt='%m-%d %H:%M:%S'
                )
                file_handler = logging.FileHandler(log_file, mode='w', encoding='utf-8')
                file_handler.setFormatter(plain_formatter) 
                logger.addHandler(file_handler)
                
            logger.setLevel(level)
        return logger
